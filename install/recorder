#!/usr/bin/tclsh

set ::scriptDir [file dirname [file normalize [info script]]]
set ::libtcldir [file join [file dirname [file dirname [file normalize [info script]]]] recorder libtcl]
source [file join $libtcldir common.tcl]
source [file join $libtcldir install.tcl]
package require tdbc
package require tdbc::postgres

proc main {} {
    getOptions - {
	{--gen-only "Только сделать файлы для установки"}
    }
    set ::ip [lindex $::argv 0]
    if {[catch {readDict [configDictFile install-recorder]} config]} {set config {}}
    set defaultConfig [dict create remoteUser user]
    set ::config [dict merge $defaultConfig $config]
    if {![dict exists $::config serverAddr]} {
	dict set ::config serverAddr [getServerAddr]
	createFileViaTmp [configFile install-recorder.json] [simpleDictToJSON $::config 1]
    }
    set db [::tdbc::postgres::connection create db -database talkrec]
    set ipConf [siteAndHeadsetForIP $db $::ip]
    set pwFile [configFile recorder.pw]
    puts "Проверяем наличие пароля станции в $pwFile..."
    set ::sudoPassword [string trim [readFile! $pwFile]]
    puts "... найден."
    # Создаем папку с файлами для установки
    set ::installerDir "talkrec-install-$::ip"
    file delete -force -- $::installerDir
    file mkdir $::installerDir
    file attributes $::installerDir -permissions 0700
    # Создаем скрипт установки
    set installRecorder [file join $::installerDir install]
    set sh [open $installRecorder w]
    puts $sh "#!/usr/bin/tclsh"
    puts $sh [readFile [file join $::libtcldir common.tcl]]
    puts $sh ""
    puts $sh [readFile [file join $::libtcldir install.tcl]]
    puts $sh ""
    puts $sh [readFile [file join $::scriptDir on-recorder.tcl]]
    close $sh
    file attributes $installRecorder -permissions 0755
    # Создаем конфиги
    createFileViaTmp [file join $::installerDir recorder.json] [genRecorderConfig $ipConf [dict get $::config serverAddr]]
    createFileViaTmp [file join $::installerDir record_manager.json] [genRecordManagerConfig $db [dict get $ipConf site_id]]
    createFileViaTmp [file join $::installerDir employees.json] [genEmployeesConfig $db [dict get $ipConf site_id]]
    if {$::opt(-gen-only)} return
    # Обеспечиваем возможность зайти по ssh
    if {[catch {runExec {*}[sshToStation true]}]} {
	runExec sshpass -f$pwFile ssh-copy-id -o StrictHostKeyChecking=no [sshWhere]
    }
    # Ставим там пакеты, необходимые для работы инсталлятора на месте
    sudoWithPw {*}[sshToStation sudo -S apt-get install --yes tcl tcllib]
    # Копируем инсталлятор
    runExec scp -rp $::installerDir [sshWhere]:
    # Запускаем инсталлятор
    if {$::opt(-debug)} {set dbgarg --debug} else {set dbgarg {}}
    runExec {*}[concat [sshToStation ./$installRecorder --sudo-pw $::sudoPassword] $dbgarg]
    file delete -force -- $::installerDir
    runExec sleep 1
    runExec {*}[sshToStation systemctl --user restart recorder]
    $db close
}

proc sshWhere {} {
    set user [dict get $::config remoteUser]
    if {$user ne ""} {append user @}
    string cat $user $::ip
}

proc sshToStation {args} {
    sshCmd [sshWhere] {*}$args
}

proc sshCmd {where args} {
    concat [list ssh -o BatchMode=yes $where] $args
}

try {main} on error {err dbg} {debugStackTrace $dbg; puts stderr $err; exit 2}
