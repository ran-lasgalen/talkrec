#!/bin/bash
set -e
. install/lib.bash
if [ "x$1" = x--dry-run ]; then
	shift
	DRY_RUN=1
fi
# Вид установки: working или demo
set_install_style "$1"
# Установка нужных пакетов
NEED_DEBS=(git tcl tcllib rsync sed screen)
ASRCLIENT=$(which asrclient-cli.py) || NEED_DEBS+=(python2.7 python-setuptools python-pip protobuf-compiler)
install_debs "${NEED_DEBS[@]}"
# Установка потокового фидера; инструкции из python/README.md из его исходников, выкачиваемых ниже
if [ -z "$ASRCLIENT" ]; then
	SKCDIR="$HOME/speechkitcloud"
	if [ ! -d "$SKCDIR" ]; then run git clone https://github.com/yandex/speechkitcloud "$SKCDIR"; fi
	run pushd "$SKCDIR/python"
	run bash -c "protoc -I=asrclient --python_out=asrclient asrclient/*.proto"
	run python ./setup.py sdist
	run cd dist
	run sudo pip install asrclient-0.5.0.tar.gz
	run popd
fi
# Настройка rsyncd
# Файл авторизации: с демо-пользователем для демо-установки, пустой для боевой
RSYNCD_SECRETS=server/rsyncd.secrets
case "$INSTALL_STYLE" in
	demo)
		run cp -a server/rsyncd.secrets.example "$RSYNCD_SECRETS"
		run chmod 600 "$RSYNCD_SECRETS"
		;;
	*)
		if ! [ -e "$RSYNCD_SECRETS" ]; then
			run touch "$RSYNCD_SECRETS"
			run chmod 600 "$RSYNCD_SECRETS"
		fi
		;;
esac
# Файл конфигурации демона rsync
run cp server/rsyncd.conf.example server/rsyncd.conf.tmp
fix_example_paths_in server/rsyncd.conf.tmp
run mv server/rsyncd.conf.tmp server/rsyncd.conf
# Установка конфига обработчика очереди, пока отсутствует
# Настройка и запуск демонов
case "$RUN_STYLE" in
	systemd)
		install_systemd_service server/talkrec-feeder.service.example
		install_systemd_service server/talkrec-rsync.service.example
		;;
	screen)
		[ -n "$STY" ] || throw "Необходим запуск из-под screen"
		run screen install/run_in_loop "$TALKREC_DIR/server/talkrec-feeder"
		run screen install/run_in_loop /usr/bin/rsync --daemon --no-detach --config "$TALKREC_DIR/server/rsyncd.conf"
		run screen install/run_in_loop "$TALKREC_DIR/server/show-results.tcl"
		;;
esac
