#!/usr/bin/tclsh
set ::scriptDir [file dirname [file normalize [info script]]]
set ::libtcldir [file join [file dirname [file dirname [file normalize [info script]]]] recorder libtcl]
set ::talkrecDir [file dirname $::scriptDir]
source [file join $libtcldir common.tcl]
source [file join $libtcldir install.tcl]
package require tdbc
package require tdbc::postgres

proc main {} {
    getOptions - {
	{--gen-only "Только сделать файлы для установки"}
	{--reconfigure "Только изменить конфигурацию"}
    }
    if {![dict exists $::paths recorderBin]} {
	dict set ::paths recorderBin [file normalize [file join $::talkrecDir recorder]]
    }
    if {$::opt(-reconfigure)} {
	set version ""
    } else {
	set version [md5OfDir [dict get $::paths recorderBin] update]
    }
    if {[catch {readDict [configDictFile install-recorder]} config]} {set config {}}
    set defaultConfig [dict create remoteUser user]
    set ::config [dict merge $defaultConfig $config]
    if {![dict exists $::config serverAddr]} {
	dict set ::config serverAddr [getServerAddr]
	createFileViaTmp [configFile install-recorder.json] [simpleDictToJSON $::config 1]
    }
    set pwFile [configFile recorder.pw]
    puts "Проверяем наличие пароля станций в $pwFile..."
    set ::sudoPassword [string trim [readFile! $pwFile]]
    puts "... найден."
    set db [::tdbc::postgres::connection create db -database talkrec]
    try {
	set ipList {}
	set unavList {}
	set uninstList {}
	set sameVersion {}
	set successList {}
	set failList {}
	set orphanedList {}
	foreach arg $::argv {
	    if {$::opt(-reconfigure) && [regexp {^\d+\.\d+\.\d+\.\d+$} $arg]} {
		# если попросили переконфигурировать IP, надо переконфигурировать весь его сайт
		set siteId [lindex [$db allrows -as lists {select site_id from record_station where ip = :arg}] 0 0]
		if {$siteId eq ""} {
		    lappend orphanedList $arg
		    continue
		} else {
		    set arg $siteId
		}
	    }
	    if {[regexp {^=?(\d+\.\d+\.\d+\.\d+)$} $arg - ip]} {
		if {$ip ni $ipList} {lappend ipList $ip}
	    } else {
		set query {select ip, state, version from record_station where site_id }
		if {[regexp {^\d+$} $arg]} {
		    # site id
		    append query {= :arg order by ip}
		} else {
		    # site name
		    append query {in (select id from site where name ~ :arg) order by site_id, ip}
		}
		$db foreach station $query {
		    set ip [dict get $station ip]
		    if {[dictGetOr X $station version] eq $version && !$::opt(-reconfigure)} {
			if {$ip ni $sameVersion} {lappend sameVersion $ip}
		    } elseif {[dictGetOr X $station version] eq "ПО не установлено"} {
			if {$ip ni $uninstList} {lappend uninstList $ip}
		    } elseif {[dictGetOr X $station state] eq "недоступна"} {
			if {$ip ni $unavList} {lappend unavList $ip}
		    } else {
			if {$ip ni $ipList} {lappend ipList $ip}
		    }
		}
	    }
	}
	foreach ip $ipList {
	    try {
		upgradeOnIP $db $ip
		lappend successList $ip
	    } on error {err dbg} {
		debugStackTrace $dbg
		lappend failList $ip
	    }
	}
	if {$::opt(-reconfigure)} {set action "переконфигурация"} else {set action "установка"}
	puts "Итоги:"
	if {[llength $sameVersion]} {puts "Не требуют обновления [join $sameVersion {, }]"}
	if {[llength $uninstList]} {puts "ПО не установлено (требуется установка) на [join $uninstList {, }]"}
	if {[llength $unavList]} {puts "Недоступны: [join $unavList {, }]"}
	if {[llength $orphanedList]} {puts "Не нашелся сайт для IP: [join $orphanedList {, }]"}
	if {[llength $successList]} {puts "Успешная $action на [join $successList {, }]"}
	if {[llength $failList]} {puts "Не удалась $action на [join $failList {, }]"}
    } finally {$db close}
}

proc upgradeOnIP {db ip} {
    set ipConf [siteAndHeadsetForIP $db $ip]
    # Создаем папку с файлами для установки
    set upgraderDir "talkrec-upgrade-$ip"
    file delete -force -- $upgraderDir
    file mkdir $upgraderDir
    file attributes $upgraderDir -permissions 0700
    # Создаем скрипт апгрейда
    set upgradeRecorder [file join $upgraderDir upgrade]
    set sh [open $upgradeRecorder w]
    puts $sh "#!/usr/bin/tclsh"
    puts $sh [readFile [file join $::libtcldir common.tcl]]
    puts $sh ""
    puts $sh [readFile [file join $::libtcldir install.tcl]]
    puts $sh ""
    puts $sh [readFile [file join $::scriptDir on-recorder.tcl]]
    close $sh
    file attributes $upgradeRecorder -permissions 0755
    # Создаем конфиги
    createFileViaTmp [file join $upgraderDir recorder.json] [genRecorderConfig $ipConf [dict get $::config serverAddr] 1]
    createFileViaTmp [file join $upgraderDir record_manager.json] [genRecordManagerConfig $db [dict get $ipConf site_id] [dict get $::config serverAddr] 1]
    createFileViaTmp [file join $upgraderDir employees.json] [genEmployeesConfig $db [dict get $ipConf site_id] 1]
    if {$::opt(-gen-only)} return
    # Копируем апгрейдер
    runExec scp -o BatchMode=yes -rp $upgraderDir [sshWhere $ip]:
    # и запускаем
    if {$::opt(-debug)} {set dbgarg --debug} else {set dbgarg {}}
    if {$::opt(-reconfigure)} {set reconfarg --reconfigure} else {set reconfarg {}}
    runExec {*}[concat [sshToStation $ip ./$upgradeRecorder --sudo-pw $::sudoPassword] $reconfarg $dbgarg]
    after 1000
    runExec {*}[sshToStation $ip systemctl --user restart recorder]
    file delete -force -- $upgraderDir
}

proc sshWhere {host} {
    set user [dict get $::config remoteUser]
    if {$user ne ""} {append user @}
    string cat $user $host
}

proc sshToStation {host args} {
    sshCmd [sshWhere $host] {*}$args
}

proc sshCmd {where args} {
    concat [list ssh -o BatchMode=yes $where] $args
}

runMain
