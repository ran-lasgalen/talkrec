#!/usr/bin/tclsh

set libtcldir [file join [file dirname [file normalize [info script]]] libtcl]
source [file join $libtcldir common.tcl]
package require yaml

proc acceptConn {sock addr port} {
    fconfigure $sock -blocking 0 -buffering line
    fileevent $sock readable [list serveCmd $sock]
}

proc cleanupIncompleteCommandCache {} {
    set now [clock seconds]
    set staleTime [expr $now - 5]
    foreach chan [array names ::incompleteCommandStart] {
	if {$::incompleteCommandStart($chan) < $staleTime} {
	    unset -nocomplain ::incompleteCommand($chan)
	    unset -nocomplain ::incompleteCommandStart($chan)
	}
    }
    return $now
}

proc getCommand {chan} {
    set now [cleanupIncompleteCommandCache]
    append ::incompleteCommand($chan) [gets $chan]
    set cmd $::incompleteCommand($chan)
    if {[info complete $cmd] && $cmd ne ""} {
	unset -nocomplain ::incompleteCommand($chan)
	unset -nocomplain ::incompleteCommandStart($chan)
	return $cmd
    } else {
	if {[eof $chan]} {
	    close $chan
	} else {
	    checkVar ::incompleteCommandStart($chan) $now
	}
	return ""
    }
}

proc checkNames {arr names} {
    upvar $arr a
    set errors {}
    foreach name $names {
	if {![info exists a($name)]} {lappend errors need:$name}
    }
    return $errors
}

proc checkKeys {dict keys} {
    set errors {}
    foreach key $keys {
	if {![dict exists $dict $key]} {lappend errors need:$key}
    }
    return $errors
}

proc checkRE {var name re} {
    upvar $var v
    if {![info exists v]} {
	return [list need:$name]
    } elseif {[regexp "^$re\$" $v]} {
	return {}
    } else {
	return [list "re:$name!$re"]
    }
}

proc tellState {chan replyId} {puts $chan [concat $replyId [array get ::recordState] [dict filter $::config key siteId headset]]}

proc tellErrors {chan replyId errors} {puts $chan [list $replyId errors $errors]}

proc serveCmd {chan} {
    set cmdWithId [getCommand $chan]
    if {$cmdWithId eq ""} return
    if {![regexp {^\s*(\d+)(.*)} $cmdWithId - replyId cmd]} {
	set cmd $cmdWithId
	set replyId 0
    }
    try {
	switch -regexp -matchvar matches $cmd {
	    {^\s*state\M} {tellState $chan $replyId}
	    {^internals$} {puts $chan [list $replyId ::record [array get ::record] ::config $::config]}
	    {^\s*clearError\s*$} {
		if {$::recordState(state) eq "error"} {
		    set ::recordState(state) noDevice
		    unset ::recordState(errorMessage)
		    if {[catch getJabraDev msg]} {setErrorState $msg}
		    tellState $chan $replyId
		}
	    }
	    {^\s*stop\s*$} {
		stopRecord
		tellState $chan $replyId
	    }
	    {^\s*start\s+(\S.*)} {
		set errors {}
		if {$::recordState(state) == "ready"} {
		    # запуск записи возможен только из состояния "готов"
		    set params [dict merge \
				    [dict filter $::config key siteId] \
				    [lindex $matches 1]]
		    if {![dict exists $params time]} {
			set recordTimeLimit 0
		    } else {
			set recordTimeLimit [dict get $params time]
		    }
		    if {$recordTimeLimit <= 0} {set recordTimeLimit 600}
		    set state [dict filter $params key name employeeId siteId]
		    set errors [checkDict $state {
			{name {имя сотрудника} .}
			{employeeId {идентификатор сотрудника из базы} {^\w+$}}
			{siteId {идентификатор салона из базы} {^\w+$}}
		    }]
		    if {[llength $errors] > 0} {
			tellErrors $chan $replyId $errors
		    } else {
			array set ::recordState $state
			set ::record(length) $recordTimeLimit
			startRecord
			tellState $chan $replyId
		    }
		} else {
		    tellErrors $chan $replyId [list "Не могу начать запись из состояния $::recordState(state)"]
	        }
	    }
	    default {
		tellErrors $chan $replyId [list "Неизвестная команда: $cmd"]
	    }
	}
    } on error {err dbg} {
	debugStackTrace $dbg
	tellErrors $chan $replyId [list "Ошибка разработчика: $err"]
    }
}

proc getJabraDev {} {
    set ::record(soundSystem) [dict get $::config soundSystem]
    unset -nocomplain ::record(device)
    switch $::record(soundSystem) {
	pulse {
	    set pipe [open "| pactl list short sources"]
	    while {![eof $pipe]} {
		if {[regexp {^\d+\s+(\S+)} [gets $pipe] dummy dev] && [regexp [dict get $::config deviceRE] $dev]} {
		    close $pipe
		    set ::record(device) $dev
		    return
		}
	    }
	    close $pipe
	    error noDevice
	}
	fake {set ::record(device) [dict get $::config fakeRecord]}
	default {error "Unsupported sound system $::record(soundSystem)"}
    }
}

# sox -r 16000 -b 16 -c 1 -t s16 "|parec --rate=16000 --channels=1 --device=alsa_input.pci-0000_00_1b.0.analog-stereo" test.wav trim 0 3
proc doStartChunk {} {
    switch $::record(soundSystem) {
	pulse {
	    set ::record(pid) [run exec parecord --rate=16000 --channels=1 --device=$::record(device) $::record(file) 2> $::record(file).stderr &]
	}
	fake {}
	default {error "Unsupported sound system $::record(soundSystem)"}
    }
    ::log::log info "Started record to $::record(file)"
}

proc doStartRecord {} {
    # TODO make pre-record settings according to soundSystem
    doStartChunk
}

proc doStopRecord {} {
    switch $::record(soundSystem) {
	pulse {
	    catch {run exec kill $::record(pid)}
	    if {[file exists $::record(file).stderr] && [file size $::record(file).stderr] == 0} {
		file delete $::record(file).stderr
	    }
	}
	fake {
	    if {[catch {file copy -- $::record(device) $::record(file)} err]} {catch {
		set fh [open $::record(file).stderr w]
		puts $fh $err
		close $fh
	    }}
	}
    }
    if {[file exists $::record(file)]} {
	createFileViaTmp $::record(file).yaml fh \
	    [::yaml::dict2yaml [dict filter [array get ::recordState] key employeeId name siteId]]
	::log::log info "Finished $::record(file)"
    } else {
	::log::log error "Error recording to $::record(file)"
    }
}

proc setErrorState {msg} {
    unset -nocomplain ::recordState(recordTime)
    if {$msg eq "noDevice"} {
	set ::recordState(state) noDevice
    } else {
	set ::recordState(errorMessage) $msg
	set ::recordState(state) error
    }
}

proc genRecordFileName {now} {
    set t [clock format $now -format "%Y%m%d_%H%M%S"]
    return [format "%s_%s_%d_%s.wav" $t $::recordState(siteId) [dict get $::config headset] $::record(id)]
}

proc startRecord {} {
    set now [clock seconds]
    set ::record(id) [format "%08x" $now]
    set ::record(file) [genRecordFileName $now]
    if {[catch doStartRecord errMsg]} {
	setErrorState $errMsg
    } else {
	set now [clock seconds]
	set ::record(chunkTime) $now
	set ::record(startTime) $now
	set ::recordState(recordTime) 0
	set ::recordState(state) recording
    }
}

proc checkRecordingProcess {} {
    switch $::record(soundSystem) {
	pulse {
	    if {[catch {run exec kill -0 $::record(pid)}]} {
		set fh [run open $::record(file).stderr]
		set errMsg [run read $fh]
		run close $fh
		run file delete -- $::record(file).stderr $::record(file)
		setErrorState $errMsg
		unset ::record
	    }
	}
	fake {}
    }
}

proc stopRecord {} {
    doStopRecord
    unset ::recordState(recordTime)
    if {[catch getJabraDev msg]} {setErrorState $msg} else {set ::recordState(state) ready}
}

proc startNextChunk {} {
    doStopRecord
    set now [clock seconds]
    set ::record(file) [genRecordFileName $now]
    if {[catch doStartChunk errMsg]} {
	setErrorState $errMsg
    } else {
	set ::record(chunkTime) $now
    }
}

proc checkVar {var val} {
    upvar $var v
    if {![info exists v]} {set v $val}
}

proc checkRecordState {} {
    if {![info exists ::recordState(state)]} {set ::recordState(state) noDevice}
    switch $::recordState(state) {
	noDevice {
	    if {[catch getJabraDev msg]} {
		setErrorState $msg
	    } else {
		set ::recordState(state) ready
	    }
	}
	ready {
	    if {[catch getJabraDev msg]} {setErrorState $msg}
	}
	recording {
	    set now [clock seconds]
	    checkVar ::record(startTime) $now 
	    checkVar ::record(chunkTime) $now
	    set ::recordState(recordTime) [expr $now - $::record(startTime)]
	    if {$::recordState(recordTime) >= $::record(length)} {
		stopRecord
	    } elseif {$now - $::record(chunkTime) >= $::recordChunkLength} {
		startNextChunk
	    } else {
		checkRecordingProcess
	    }
	}
    }
    after 500 checkRecordState
}

proc updateArray {arr allowNames pairList} {
    upvar $arr a
    foreach {name value} $pairList {
	if {[lsearch -exact $allowNames $name] >= 0} {
	    set a($name) $value
	}
    }
}

proc updateDict {dict allowKeys pairList} {
    upvar $dict d
    foreach {key value} $pairList {
	if {[lsearch -exact $allowKeys $key] >= 0} {
	    dict set d $key $value
	}
    }
}

proc readConfig {file} {
    set defaultConfig [dict create recorderPort 17119 workdir . soundSystem pulse deviceRE input.usb-GN_Netcom_A_S_Jabra_PRO_9460]
    set readConfig [::yaml::yaml2dict -file $file]
    set config [dict merge $defaultConfig $readConfig]
    set errors {}
    if {![dict exists $config headset]} {
	lappend errors "Не указан номер гарнитуры (ключ headset)"
    } elseif {![regexp {^\d+$} [dict get $config headset]]} {
	lappend errors "Номер гарнитуры (ключ headset) должен быть числом"
    }
    switch [dict get $config soundSystem] {
	pulse {
	    if {![dict exists $config deviceRE]} {lappend errors "Не указано регулярное выражение устройства (ключ deviceRE)"}
	}
	fake {
	    if {![dict exists $config fakeRecord]} {
		lappend errors "Не указан файл-источник записи (ключ fakeRecord)"
	    } else {
		dict set config fakeRecord [file normalize [dict get $config fakeRecord]]
	    }
	}
    }
    if {[llength $errors] > 0} {error [listOfErrors "Ошибки конфигурации" $errors]}
    set ::config $config
    file mkdir [dict get $::config workdir]
    cd [dict get $::config workdir]
}

proc main {} {
    getOptions [configFile recorder.yaml] {}
    array set ::recordState {}
    if {[catch {readConfig $::opt(config)} err dbg]} {
	debugStackTrace $dbg
	::log::log error "Ошибка чтения конфигурации из $::opt(config):\n$err"
	exit 2
    }
    set ::recordChunkLength 600
    checkRecordState
    socket -server acceptConn [dict get $::config recorderPort]
    ::log::log notice "Слушаю на порту TCP [dict get $::config recorderPort]"
    vwait forever
}

main
