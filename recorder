#!/bin/sh
# -*- tcl -*- \
exec tclsh "$0"  ${1+"$@"}

package require Tcl 8.2
package require cmdline

proc acceptConn {sock addr port} {
    fconfigure $sock -blocking 0 -buffering line
    puts $sock "Hello $addr:$port"
    fileevent $sock readable [list serveCmd $sock]
}

proc cleanupIncompleteCommandCache {} {
    set now [clock seconds]
    set staleTime [expr $now - 5]
    foreach chan [array names ::incompleteCommandStart] {
	if {$::incompleteCommandStart($chan) < $staleTime} {
	    unset -nocomplain ::incompleteCommand($chan)
	    unset -nocomplain ::incompleteCommandStart($chan)
	}
    }
    return $now
}

proc getCommand {chan} {
    set now [cleanupIncompleteCommandCache]
    append ::incompleteCommand($chan) [gets $chan]
    set cmd $::incompleteCommand($chan)
    if {[info complete $cmd] && $cmd ne ""} {
	unset -nocomplain ::incompleteCommand($chan)
	unset -nocomplain ::incompleteCommandStart($chan)
	return $cmd
    } else {
	if {[eof $chan]} {
	    close $chan
	} else {
	    checkVar ::incompleteCommandStart($chan) $now
	}
	return ""
    }
}

proc checkNames {arr names} {
    upvar $arr a
    set errors {}
    foreach name $names {
	if {![info exists a($name)]} {lappend errors need:$name}
    }
    return $errors
}

proc checkRE {var name re} {
    upvar $var v
    if {![info exists v]} {
	return [list need:$name]
    } elseif {[regexp "^$re\$" $v]} {
	return {}
    } else {
	return [list "re:$name!$re"]
    }
}

proc tellState {chan} {puts $chan [concat [array get ::recordState] [array get ::config siteId] [array get ::config headset]]}

proc tellErrors {chan errors} {puts $chan [list errors $errors]}

proc serveCmd {chan} {
    set cmd [getCommand $chan]
    if {$cmd eq ""} return
    switch -regexp -matchvar matches $cmd {
	{^\s*state\M} {tellState $chan}
	{^internals$} {puts $chan [list ::record [array get ::record]]}
	{^\s*set\s+(\S.*)} {
	    set params [lindex $matches 1]
	    updateArray ::recordState {name employeeId} $params
	    updateArray ::config {siteId} $params
	    tellState $chan
	}
	{^\s*clearError\s*$} {
	    if {$::recordState(state) eq "error"} {
		set ::recordState(state) noDevice
		unset ::recordState(errorMessage)
		if {[catch getJabraDev msg]} {setErrorState $msg}
		tellState $chan
	    }
	}
	{^\s*stop\s*$} {
	    stopRecord
	    tellState $chan
	}
	{^\s*start\s+(\S.*)} {
	    set errors {}
	    if {$::recordState(state) == "ready"} {
		# запуск записи возможен только из состояния "готов"
		set params [lindex $matches 1]
		array set pa $params
		updateArray ::recordState {name employeeId} $params
		set rsErrors [checkNames ::recordState {name employeeId}]
		set cfErrors [checkNames ::config {siteId headset}]
		set tmErrors [checkRE ::recordState(time) time {\d+}]
		if {![info exists pa(time)]} {
		    set tmErrors [list "need:time"]
		} elseif {$pa(time) <= 0} {
		    set tmErrors [list "cond:time>0"]
		} else {
		    set ::record(length) $pa(time)
		    set tmErrors {}
		}
		set errors [concat $rsErrors $cfErrors $tmErrors]
		if {[llength $errors]} {
		    tellErrors $chan $errors
		} else {
		    startRecord
		    tellState $chan
		}
	    } else {
		tellErrors $chan [list "wrongState:$::recordState(state)"]]
	    }
	}
	default {
	    tellErrors $chan [list "Unrecognized command: $cmd"]]
	}
    }   
}

proc getJabraDev {} {
    set ::record(soundSystem) $::opt(snd)
    unset -nocomplain ::record(device)
    switch $::record(soundSystem) {
	pulse {
	    set pipe [open "| pactl list short sources"]
	    while {![eof $pipe]} {
		if {[regexp {^\d+\s+(\S+)} [gets $pipe] dummy dev] && [regexp $::opt(dev) $dev]} {
		    close $pipe
		    set ::record(device) $dev
		    return
		}
	    }
	    close $pipe
	    error noDevice
	}
	fake {set ::record(device) $::opt(dev)}
	default {error "Unsupported sound system $::record(soundSystem)"}
    }
}

proc doStartChunk {} {
    switch $::record(soundSystem) {
	pulse {
	    set ::record(pid) [exec parecord --rate=16000 --channels=1 --device=$::record(device) $::record(file) 2> $::record(file).stderr &]
	}
	fake {}
	default {error "Unsupported sound system $::record(soundSystem)"}
    }
}

proc doStartRecord {} {
    # TODO make pre-record settings according to soundSystem
    doStartChunk
}

proc doStopRecord {} {
    switch $::record(soundSystem) {
	pulse {
	    catch {exec kill $::record(pid)}
	    if {[file exists $::record(file).stderr] && [file size $::record(file).stderr] == 0} {
		file delete $::record(file).stderr
	    }
	}
	fake {
	    file copy -- $::record(device) $::record(file)
	}
    }
    if {[file exists $::record(file)]} {
	set fh [open $::record(file).meta.tmp w]
	puts $fh "employeeId=$::recordState(employeeId)"
	puts $fh "name=$::recordState(name)"
	close $fh
	file rename $::record(file).meta.tmp $::record(file).meta
    }
}

proc setErrorState {msg} {
    unset -nocomplain ::recordState(recordTime)
    if {$msg eq "noDevice"} {
	set ::recordState(state) noDevice
    } else {
	set ::recordState(errorMessage) $msg
	set ::recordState(state) error
    }
}

proc genRecordFileName {now} {
    set t [clock format $now -format "%Y%m%d_%H%M%S"]
    return [format "%s_%s_%d_%s.wav" $t $::config(siteId) $::config(headset) $::record(id)]
}

proc startRecord {} {
    set now [clock seconds]
    set ::record(id) [format "%08x" $now]
    set ::record(file) [genRecordFileName $now]
    if {[catch doStartRecord errMsg]} {
	setErrorState $errMsg
    } else {
	set now [clock seconds]
	set ::record(chunkTime) $now
	set ::record(startTime) $now
	set ::recordState(recordTime) 0
	set ::recordState(state) recording
    }
}

proc checkRecordingProcess {} {
    switch $::record(soundSystem) {
	pulse {
	    if {[catch {exec kill -0 $::record(pid)}]} {
		set fh [open $::record(file).stderr]
		set errMsg [read $fh]
		close $fh
		file delete -- $::record(file).stderr $::record(file)
		setErrorState $errMsg
		unset ::record
	    }
	}
	fake {}
    }
}

proc stopRecord {} {
    doStopRecord
    unset ::recordState(recordTime)
    if {[catch getJabraDev msg]} {setErrorState $msg} else {set ::recordState(state) ready}
}

proc startNextChunk {} {
    doStopRecord
    set now [clock seconds]
    set ::record(file) [genRecordFileName $now]
    if {[catch doStartChunk errMsg]} {
	setErrorState $errMsg
    } else {
	set ::record(chunkTime) $now
    }
}

proc checkVar {var val} {
    upvar $var v
    if {![info exists v]} {set v $val}
}

proc checkRecordState {} {
    if {![info exists ::recordState(state)]} {set ::recordState(state) noDevice}
    switch $::recordState(state) {
	noDevice {
	    if {[catch getJabraDev msg]} {
		setErrorState $msg
	    } else {
		set ::recordState(state) ready
	    }
	}
	ready {
	    if {[catch getJabraDev msg]} {setErrorState $msg}
	}
	recording {
	    set now [clock seconds]
	    checkVar ::record(startTime) $now 
	    checkVar ::record(chunkTime) $now
	    set ::recordState(recordTime) [expr $now - $::record(startTime)]
	    if {$::recordState(recordTime) >= $::record(length)} {
		stopRecord
	    } elseif {$now - $::record(chunkTime) >= $::recordChunkLength} {
		startNextChunk
	    } else {
		checkRecordingProcess
	    }
	}
    }
    after 500 checkRecordState
}

proc updateArray {arr allowNames pairList} {
    upvar $arr a
    foreach {name value} $pairList {
	if {[lsearch -exact $allowNames $name] >= 0} {
	    set a($name) $value
	}
    }
}

proc main {} {
    array set ::recordState {}
    set optDesc {
	{headset.arg "" "номер гарнитуры, обязательный"}
	{site.arg "" "идентификатор салона"}
	{port.arg 17119 "слушать на этом порту TCP"}
	{snd.arg "pulse" "звуковая система (pulse, fake)"}
	{dev.arg "input.usb-GN_Netcom_A_S_Jabra_PRO_9460" "устройство записи, зависит от -snd\n\tдля pulse — регулярное выражение\n\tдля fake — имя файла"}
    }
    set usageString "options"
    if {[catch {::cmdline::getoptions ::argv $optDesc $usageString} res]} {
	puts stderr $res
	exit 1
    }
    array set ::opt $res
    if {$::opt(headset) > 0} {set ::config(headset) $::opt(headset)}
    if {![info exists ::config(headset)]} {
	puts stderr "Headset number is not specified.\n[::cmdline::usage $optDesc $usageString]"
	exit 2
    }
    set ::recordChunkLength 20
    checkRecordState
    puts "Listening on port $::opt(port)"
    socket -server acceptConn $::opt(port)
    vwait forever
}

main
