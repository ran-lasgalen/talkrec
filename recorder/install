#!/usr/bin/tclsh

set ::scriptdir [file dirname [file normalize [info script]]]
set ::exampledir [file join $::scriptdir example]
set libtcldir [file join $::scriptdir libtcl]
source [file join $libtcldir common.tcl]
source [file join $libtcldir install.tcl]
package require yaml

proc main {} {
    set optDesc {
	{server.arg "" "IP-адрес сервера распознавания"}
	{recorders.arg "" "IP-адреса устройств записи, через запятую"}
	{headset.arg "" "Номер гарнитуры на этой станции записи"}
	{site.arg "" "Номер салона"}
    }
    getOptions - $optDesc "\[OPTIONS] demo|CONFIG_FILE"
    set cfg [lindex $::argv 0]
    if {$cfg eq ""} {
	puts stderr [::cmdline::usage $optDesc "\[OPTIONS] demo|CONFIG_FILE"]
	exit 1
    }
    try {
	if {$cfg eq "demo"} {
	    set configFile [file join $::exampledir recorder.yaml]
	    set fillRequired [dict create headset 1 siteId 1]
	    set ::runStyle demo
	} else {
	    set configFile [file normalize $cfg]
	    set fillRequired [dict create]
	    set ::runStyle systemd
	}
	set ::config [dict merge $fillRequired [::yaml::yaml2dict -file $configFile]]
    } on error {err dbg} {
	debugStackTrace $dbg
	puts stderr $err
	exit 1
    }
    catch {
	set ::runStyle [dict get $::config runStyle]
	dict unset ::config runStyle
    }
    if {$::opt(server) ne ""} {
	dict set ::config server $::opt(server)
    } elseif {![dict exists $::config server]} {
	puts -nonewline "IP-адрес сервера распознавания: "
	flush stdout
	dict set ::config server [string trim [gets stdin]]
    }
    if {$::opt(recorders) ne ""} {
	dict set ::config recorders [split $::opt(recorders) ,]
    } elseif {![dict exists $::config recorders]} {
	dict set ::config recorders [inputList "Введите адреса станций записи" "Адрес станции"]
    }
    if {$::opt(headset) ne ""} {dict set ::config headset $::opt(headset)}
    if {$::opt(site) ne ""} {dict set ::config siteId $::opt(site)}
    foreach param {server headset siteId user password recorders} {
	if {![dict exists $::config $param] < 0} {
	    append errors "\n- не указан обязательный параметр $param"
	} elseif {[dict get $::config $param] eq ""} {
	    append errors "\n- значение $param должно быть непустым"
	}
    }
    if {[info exists errors]} {
	puts stderr "Ошибки конфигурации:$errors"
	exit 2
    }
    if {[catch doInstall err dbg]} {
	debugStackTrace $dbg
	puts stderr $err
	exit 3
    }
}

proc doInstall {} {
    set needDebs {tcl tcllib tk rsync}
    if {[catch {dict get $::config soundSystem} soundSystem]} {
	lappend needDebs sox pulseaudio pulseaudio-utils
    } else {
	switch $soundSystem {
	    pulse {lappend needDebs sox pulseaudio pulseaudio-utils}
	}
    }
    installDebs $needDebs
    run file mkdir $::configDir
    set recorderConfig [dict filter $::config key workdir headset soundSystem deviceRE fakeRecord server user password]
    set recorderYaml [::yaml::dict2yaml $recorderConfig]
    set managerYaml "siteId: [dict get $::config siteId]\nrecorders:"
    foreach recorder [dict get $::config recorders] {append managerYaml "\n  - $recorder"}
    set pwFiles [glob -nocomplain -directory $::configDir *.pw]
    run file delete -- $::configDir/recorder.tcl $::configDir/sound_sender.bash {*}$pwFiles
    createFileViaTmp [configFile recorder.yaml] $recorderYaml
    createFileViaTmp [configFile record_manager.yaml] $managerYaml
    switch $::runStyle {
	demo {
	    createFileViaTmp [configFile employees.yaml] "Иван Царевич: 1\nВасилиса Премудрая: 2"
	    puts "\nУстановка завершена успешно. Теперь выполните\n$::scriptdir/demo_run"
	}
	default {
	    puts stderr "Способ запуска $::runStyle пока не поддерживается"
	}
    }
}

main
