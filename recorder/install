#!/usr/bin/tclsh

set ::scriptdir [file dirname [file normalize [info script]]]
set ::exampledir [file join $::scriptdir example]
set libtcldir [file join $::scriptdir libtcl]
source [file join $libtcldir common.tcl]
source [file join $libtcldir install.tcl]
package require yaml

proc main {} {
    set optDesc {
	{server.arg "" "IP-адрес сервера распознавания"}
    }
    getOptions - $optDesc "\[OPTIONS] demo|CONFIG_FILE"
    set cfg [lindex $::argv 0]
    if {$cfg eq ""} {
	puts stderr [::cmdline::usage $optDesc "\[OPTIONS] demo|CONFIG_FILE"]
	exit 1
    }
    try {
	if {$cfg eq "demo"} {
	    set configFile [file join $::exampledir recorder.yaml]
	    set fillRequired [dict create headset 1 siteId 1]
	    set ::runStyle demo
	} else {
	    set configFile [file normalize $cfg]
	    set fillRequired [dict create]
	    set ::runStyle systemd
	}
	set ::config [dict merge $fillRequired [::yaml::yaml2dict -file $configFile]]
    } on error {err dbg} {
	debugStackTrace $dbg
	puts stderr $err
	exit 1
    }
    if {[dict exists $::config runStyle]} {
	set ::runStyle [dict get $::config runStyle]
	dict unset ::config runStyle
    }
    foreach override [concat server [dict keys $::config]] {
	if {[info exists ::opt($override)] && $::opt($override) ne ""} {
	    dict set ::config $override $::opt($override)
	}
    }
    foreach param {server headset siteId user password} {
	if {![dict exists $::config $param]} {
	    append errors "\n- не указан обязательный параметр $param"
	}
    }
    if {[info exists errors]} {
	puts stderr "Ошибки конфигурации:$errors"
	exit 2
    }
    if {[catch doInstall err dbg]} {
	debugStackTrace $dbg
	puts stderr $err
	exit 3
    }
}

proc doInstall {} {
    set needDebs {tcl tcllib tk rsync sox}
    if {![dict exists $::config soundSystem]} {
	lappend needDebs {pulseaudio pulseaudio-utils}
    } else {
	switch {[dict get $::config soundSystem]} {
	    pulse {lappend needDebs {pulseaudio pulseaudio-utils}}
	}
    }
    installDebs $needDebs
    run file mkdir $::configDir
    set pwFiles [glob -nocomplain -directory $::configDir *.pw]
    run file delete -- $::configDir/recorder.tcl $::configDir/sound_sender.bash {*}$pwFiles
    createFileViaTmp [file join $::configDir recorder.yaml] rcfh {
	run puts $rcfh [::yaml::dict2yaml $::config]
    }
    switch $::runStyle {
	demo {
	    run exec $::scriptdir/demo_run >@ stdout 2>@ stderr
	}
	default {
	    puts stderr "Способ запуска $::runStyle пока не поддерживается"
	}
    }
}

main
