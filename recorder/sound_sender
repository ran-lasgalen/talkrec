#!/usr/bin/tclsh

set libtcldir [file join [file dirname [file normalize [info script]]] libtcl]
source [file join $libtcldir common.tcl]
package require yaml

proc main {} {
    getOptions ~/.config/talkrec/recorder.yaml {}
    if {![rereadConfig]} {exit 2}
    after idle runQueue
    vwait forever
}

proc rereadConfig {} {
    try {
	if {[fileModified $::opt(config)]} {set ::config [readConfig $::opt(config)]}
	return true
    } on error err {
	::log::log error $err
	return false
    }
}

proc readConfig {configFile} {
    set conf [::yaml::yaml2dict -file $configFile]
    set errors {}
    if {![dict exists $conf user]} {lappend errors "не указано имя пользователя для rsync (ключ user)"}
    if {![dict exists $conf password]} {lappend errors "не указан пароль для rsync (ключ password)"}
    if {![dict exists $conf server]} {lappend errors "не указан сервер распознавания (ключ server)"}
    if {[llength $errors] > 0} {error [listOfErrors "Ошибки при чтении файла конфигурации $configFile" $errors]}
    if {![dict exists $conf workdir]} {
	set wd [file normalize .]
	::log::log notice "рабочая папка (ключ workdir) не указана, установлена в $wd"
	dict set conf workdir $wd
    }
    return $conf
}

proc runQueue {} {
    rereadConfig
    set soundFiles [glob -nocomplain -directory [file normalize [dict get $::config workdir]] *.wav]
    foreach soundFile $soundFiles {sendSound $soundFile}
    after 12000 runQueue
}

proc sendSound {soundFile} {
    set metaFile $soundFile.yaml
    set flagFile $soundFile.flag
    if {![file exists $metaFile]} return
    if {[catch {
	set ::env(RSYNC_PASSWORD) [dict get $::config password]
	set user [dict get $::config user]
	set server [dict get $::config server]
	set fh [open $flagFile w]
	close $fh
	run exec rsync -tz -- $soundFile $metaFile "rsync://$user@$server:8873/queue"
	run exec rsync -t -- $flagFile "rsync://$user@$server:8873/queue"
	run file delete -- $soundFile $metaFile $flagFile
    } err]} {
	::log::log error $err
    }
}

main
