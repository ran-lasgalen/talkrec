#!/usr/bin/wish

set libtcldir [file join [file dirname [file normalize [info script]]] libtcl]
source [file join $libtcldir common.tcl]
set scriptdir [file dirname [file normalize [info script]]]
package require yaml
package require BWidget

set ::notTaken —

proc main {} {
    getOptions [configDictFile record_manager] {}
    try {
	# Ключ - имя, значение - employeeId
	array set ::employee [readDict [configFile employees]]
	set ::config [readConfig $::opt(-config)]
    } on error {err dbg} {
	debugStackTrace $dbg
	puts stderr $err
	exit 2
    }
    array set ::availableHeadsets {}
    array set ::headsetsInUse {}
    set ::defaultbg white;	# default is gray85
    set ::defaultFont [fontInSize TkDefaultFont 14]
    option add *font $::defaultFont
    set ::defaultBoldFont [boldVersionOfFont $::defaultFont]
    set ::timeFont [fontInFactor $::defaultFont 2]
    set ::dateFont [fontInFactor $::defaultFont 1.5]
    set ::shopFont [fontInFactor $::defaultFont 1.5]
    createMainFrame
    refillEmployeeControls
    set ::recorders [lmap r [dict get $::config recorders] {splitAddr $r 17119}]
    foreach recorder $::recorders {startConnectionToRecorder $recorder}
    asyncLoop maybeUpdateEmployees 2000 maybeUpdateEmployees
    if {![catch {dict get $::config server} ::serverAddr]} {
	safelog {info "Сервер конфигурации: $::serverAddr"}
	asyncConnect $::serverAddr 17120 2000 {} onConnectToConfigurator onDisconnectFromConfigurator
    }
    asyncLoop updateCurrentDateTime 1000 updateCurrentDateTime
}

proc startConnectionToRecorder {recorder} {
    if {$recorder in $::recorders} {
	asyncConnect {*}$recorder 2000 {} onConnectToRecorder onDisconnectFromRecorder
    }
}

proc onConnectToRecorder {connData} {
    safelog {debug [list onConnectToRecorder $connData]}
    set chan [connDataChan $connData]
    set peer [connDataPeer $connData]
    if {[info exists ::peerConnData($peer)]} {
	safelog {warning "Соединение с $peer уже есть"}
	catch {close $chan}
	return
    }
    set ::peerConnData($peer) $connData
    fconfigure $chan -buffering line
    after 1000 [list asyncDisconnect $connData replyTimeout]
    fileevent $chan readable [list asyncOnReply $connData 1000 onReplyFromRecorder]
    asyncLoop "request state from $peer" 500 [list requestState $connData]
}

proc onDisconnectFromRecorder {connData reason message} {
    set peer [connDataPeer $connData]
    after cancel [list asyncLoop "request state from $peer" 500 [list requestState $connData]]
    foreach {headset p} [array get ::availableHeadsets] {
	if {$p eq $peer} {
	    unset ::availableHeadsets($headset)
	    unset -nocomplain ::headsetState($headset)
	    catchDbg {updateWidgetsForHeadset $headset}
	    break
	}
    }
    unset -nocomplain ::peerConnData($peer)
    switch $reason {
	error {
	    if {$message ne "connection refused"} {
		safelog {error "Ошибка от станции записи [connDataPeerColon $connData]: $message"}
	    } else {
		safelog {debug "Станция записи [connDataPeerColon $connData] не работает"}
	    }
	}
    }
    after 10000 [list startConnectionToRecorder $peer]
}

proc onConnectToConfigurator {connData} {
    safelog {debug [list onConnectToConfigurator $connData]}
    set chan [connDataChan $connData]
    fconfigure $chan -buffering line
    after 4000 [list asyncDisconnect $connData replyTimeout]
    ::json::write indented 0
    catchDbg {puts $chan [::json::write object configurations \
			      [::json::write array [::json::write string employees]]]}
    fileevent $chan readable [list asyncOnReply $connData 4000 onReplyFromConfigurator]
}

proc onDisconnectFromConfigurator {connData reason message} {
    safelog {debug [list onDisconnectFromConfigurator $connData $reason $message]}
    switch $reason {
	connectTimeout {safelog {warning "Сервер конфигурации [connDataHost $connData] недоступен"}}
	replyTimeout {safelog {warning "Сервер конфигурации [connDataHost $connData] не ответил"}}
	error {safelog {warning "Ошибка от сервера конфигурации [connDataPeerColon $connData]: $message"}}
    }
    after 60000 [list asyncConnect {*}[connDataPeer $connData] 2000 {} onConnectToConfigurator onDisconnectFromConfigurator]
}

proc onReplyFromConfigurator {connData line} {
    if {[catch {parseObject $line} obj]} {return [list error "непонятный ответ $line"]}
    if {[dict exists $obj employees]} {
	set newEmployees [dictAsSet [dict get $obj employees]]
	if {$newEmployees ne [dictAsSet [array get ::employee]]} {
	    createFileViaTmp [configFile employees.json] [simpleDictToJSON $newEmployees 1]
	}
    }
    return {ok {}}
}

proc maybeUpdateEmployees {} {
    try {
	set employeesFile [configDictFile employees]
	if {![fileModified $employeesFile]} return
	set updated [readDict $employeesFile]
	if {[dictAsSet [array get ::employee]] ne [dictAsSet $updated]} {
	    unset ::employee
	    array set ::employee $updated
	    refillEmployeeControls
	}
    } on error {err dbg} {
	debugStackTrace $dbg
	safelog {error $err}
    }
}

proc readConfig {configFile} {
    set conf [readDict $configFile]
    set errors {}
    if {![dict exists $conf server]} {lappend errors "не указан адрес сервера"}
    if {![dict exists $conf recorders]} {lappend errors "не указаны адреса устройств записи (recorders)"}
    if {![dict exists $conf siteId]} {lappend errors "не указан идентификатор салона (siteId)"}
    if {[llength $errors] > 0} {error [listOfErrors "Ошибки конфигурации" $errors]}
    return $conf
}

proc debug {message} {puts stderr $message}

proc setIfExists {checkVar setVar} {
    upvar $checkVar cv
    set ie [info exists cv]
    if {$ie} {
	upvar $setVar v
	set v $cv
    }
    return $ie
}

# TODO be more careful on possible filling buffers
proc sendRequest {connData request} {
    set peer [connDataPeer $connData]
    safelog {debug "$peer <- $request"}
    set chan [connDataChan $connData]
    if {[catch {puts $chan $request} err]} {
	asyncDisconnect $connData error "Ошибка отправки запроса к $peer: $err"
	return 0
    }
    if {[chanHasError $chan err]} {
	asyncDisconnect $connData error "Ошибка в соединении с $peer: $err"
	return 0
    }
    return 1
}

proc requestState {connData} {
    if {![sendRequest $connData [simpleDictToJSON [dict create msgId [nextCommandId] req state]]]} {
	return -code break
    }
}

proc onReplyFromRecorder {connData line} {
    set peer [connDataPeer $connData]
    safelog {debug "$peer -> $line"}
    if {[catch {lindex [parseRecorderReply $line] 1} reply]} {
	safelog {error "Проблема с запросом от $peer: $reply"}
	return {}
    }
    array set state $reply
    if {[setIfExists state(headset) headset]} {
	# если в ответе есть номер гарнитуры
	# записываем, на каком она хосте
	if {[info exists peer]} {
	    set ::availableHeadsets($headset) $connData
	} else {
	    unset ::availableHeadsets($headset)
	}
	set ::headsetState($headset) [array get state]
	if {[setIfExists state(employeeId) eid]} {
	    # станция в курсе, что кто-то взял
	    bindHeadsetToEmployee $headset $eid
	} else {
	    # сообщают, что гарнитура свободна
	    # если мы взяли гарнитуру, нам могут не мгновенно сообщить,
	    # что она наша, реагируем только через 2 секунды
	    if {![info exists ::headsetTakeIntent($headset)] ||
		[clock milliseconds] - $::headsetTakeIntent($headset) > 2000} {
		bindHeadsetToEmployee $headset {}
	    }
	}
    }
    if {[setIfExists state(errors) errors]} {
	# если errors - это точно нам, их отправляют в ответ на запрос
	setLastErrors $errors
    }
    return {}
}

proc setLastErrors {errors} {
    set frame [lindex $::lastErrorsFrame 0]
    set text $frame.text
    $text replace 1.0 end [join $errors "\n"]
    $text see 1.0
    if {[llength [grid info $frame]] == 0} {grid {*}$::lastErrorsFrame}
}

proc showCurrentErrorForEmployee {employeeId} {
    if {![setIfExists ::headsetsInUse(e_$employeeId) headset]} return
    if {![setIfExists ::headsetState($headset) state]} return
    if {[dictGetOr "" $state state] eq "error"} {
	set errorMessage [dictGetOr "" $state errorMessage]
	if {$errorMessage ne ""} {setLastErrors [list $errorMessage]}
    }
}

proc reportBgError {msg dbg} {
    safelog {error [dictGetOr $msg $dbg -errorinfo]}
}

interp bgerror {} reportBgError

proc bindHeadsetToEmployee {headset eid} {
    # снимаем ожидание взятия, если оно было 
    unset -nocomplain ::headsetTakeIntent($headset)
    if {[setIfExists ::headsetsInUse(h_$headset) knownEid]} {
	# если мы думали, что гарниьура у другого, то нет, не у него
	if {$knownEid ne $eid} {unset -nocomplain ::headsetsInUse(e_$knownEid)}
	# для гарнитуры - следующим шагом
    }
    # фиксируем актуальное состояние in use
    if {$eid eq ""} {
	unset -nocomplain ::headsetsInUse(h_$headset)
    } else {
	set ::headsetsInUse(h_$headset) $eid
	set ::headsetsInUse(e_$eid) $headset
    }
    if {[info exists knownEid] && $knownEid ne $eid} {
	# если только что отобрали гарнитуру, отображаем у того сотрудника
	updateWidgetsForEmployee $knownEid {}
    }
    if {$eid ne ""} {
	# и если гарнитура сейчас у кого-то, отображаем у текущего владельца
	updateWidgetsForEmployee $eid $headset
    }
}

proc nextCommandId {} {
    incr ::nextCommandId
}

proc boldVersionOfFont {font} {
    array set font_attrs [font actual $font]
    set font_attrs(-weight) bold
    if {[catch {font create {*}[array get font_attrs]} res]} {
	puts stderr "boldVersionOfFont: $res"
	return $font
    } else {
	return $res
    }
}

proc fontInFactor {font factor} {
    array set font_attrs [font actual $font]
    set font_attrs(-size) [expr "int(" $font_attrs(-size) * $factor ")"]
    if {[catch {font create {*}[array get font_attrs]} res]} {
	puts stderr "fontInFactor: $res"
	return $font
    } else {
	return $res
    }
}

proc fontInSize {font size} {
    array set font_attrs [font actual $font]
    set font_attrs(-size) $size
    if {[catch {font create {*}[array get font_attrs]} res]} {
	puts stderr "fontInSize: $res"
	return $font
    } else {
	return $res
    }
}

proc updateCurrentDateTime {} {
    set now [clock seconds]
    $::currentTimeLabel configure -text [clock format $now -format %H:%M]
    $::currentDateLabel configure -text [dateRu $now]
}

proc createMainFrame {} {
    option add *background $::defaultbg
    set ::mainWindow .
    wm title $::mainWindow "Управление записью"
    wm iconname $::mainWindow "Управление записью"
    #wm attributes $::mainWindow -fullscreen 1
    grid anchor $::mainWindow center
    set logo [image create photo logo -file [file join $::scriptdir logo.png]]
    grid [label .logo -image $logo -background red] -sticky we
    grid [frame .space1] -ipady 10 -sticky we
    set infoFrame [frame .infoFrame]
    grid $infoFrame -sticky we
    set ::shopLabel [label $infoFrame.shop -text [dictGetOr "" $::config siteName] -padx 40 -font $::shopFont]
    grid $::shopLabel -row 1 -column 0 -sticky w
    grid [frame $infoFrame.space] -row 1 -column 1 -sticky we
    grid columnconfigure $infoFrame 1 -weight 1
    set ::currentTimeLabel [label $infoFrame.currentTime -foreground red -padx 40 -font $::timeFont]
    grid $::currentTimeLabel -row 0 -column 2 -sticky e
    set ::currentDateLabel [label $infoFrame.currentDate -foreground red -padx 40 -font $::dateFont]
    grid $::currentDateLabel -row 1 -column 2 -sticky e
    updateCurrentDateTime
    grid [frame .space2] -ipady 10 -sticky we
    set mainFrameContainer [frame .mainFrameContainer]
    grid $mainFrameContainer -sticky nswe
    array set i [grid info $mainFrameContainer]
    grid columnconfigure $i(-in) $i(-column) -weight 1
    grid rowconfigure $i(-in) $i(-row) -weight 1
    set mainFrame [ScrolledWindow $mainFrameContainer.mainFrame]
    grid [frame $mainFrameContainer.space1] -ipadx 20 -sticky ns
    grid $mainFrame -row 0 -column 1 -sticky nswe
    array set i [grid info $mainFrame]
    grid columnconfigure $i(-in) $i(-column) -weight 1
    grid rowconfigure $i(-in) $i(-row) -weight 1
    set sf [ScrollableFrame $mainFrame.sf]
    $mainFrame setwidget $sf
    set ::employeeFrame [$sf getframe]
    createEmployeesTable $::employeeFrame
    set lastErrorsFrame [createTextFrame .errors -width 80 -height 3 -foreground red]
    grid [button $lastErrorsFrame.hide -text "Скрыть" -command [list grid forget $lastErrorsFrame]] -column 2 -row 0 -rowspan 2 -sticky ns
    grid $lastErrorsFrame -sticky we
    grid [button .endDay -command leaveAllHeadsets -text {Завершить рабочий день}] -sticky we
    set ::showLogger 0
    grid [checkbutton .showLogger -text {Показывать окно технического отчета} -command showOrHideLogger] -sticky we
    set loggerFrame [createTextFrame .logger -width 80 -height 12 -wrap none]
    set ::showDebuggingOutput $::opt(-debug)
    grid [checkbutton $loggerFrame.showDebuggingOutput -text {Показывать отладочный вывод} -command showOrHideDebug] -column 0 -row 2 -sticky w
    grid $loggerFrame -sticky we
    set ::lastErrorsFrame [concat [list $lastErrorsFrame] [grid info $lastErrorsFrame]]
    grid forget $lastErrorsFrame
    set ::loggerFrame [concat [list $loggerFrame] [grid info $loggerFrame]]
    grid forget $loggerFrame
    ::log::lvCmdForall logToLogger
    foreach level [::log::levels] {
	set color [::log::lv2color $level]
	if {$color ne ""} {
	    $loggerFrame.text tag configure $level -foreground $color
	}
    }
}

proc showOrHideLogger {} {
    set lf [lindex $::loggerFrame 0]
    if {$::showLogger} {
	if {[llength [grid info $lf]] == 0} {grid {*}$::loggerFrame}
    } else {
	if {[llength [grid info $lf]] > 0} {grid forget $lf}
    }
}

proc showOrHideDebug {} {
    if {$::showDebuggingOutput} {
	::log::lvSuppress debug 0
    } else {
	::log::lvSuppress debug 1
    }
}

proc logToLogger {level line} {
    set text [lindex $::loggerFrame 0].text
    if {[$text count -lines 1.0 end] >= 1000} {
	$text delete 1.0 101.0
    }
    set vis [$text dlineinfo {end-1c linestart}]
    $text insert end "\n$line" $level
    if {$vis ne ""} {$text see {end-1c linestart}}
}

proc createTextFrame {path args} {
    set frame [frame $path]
    set text [text $path.text -yscrollcommand [list $path.ybar set] -xscrollcommand [list $path.xbar set] {*}$args]
    set xbar [scrollbar $path.xbar -orient horizontal -command [list $path.text xview]]
    set ybar [scrollbar $path.ybar -orient vertical -command [list $path.text yview]]
    grid $text $ybar
    grid $xbar
    grid configure $text -sticky nwse
    grid configure $ybar -sticky ns
    grid configure $xbar -sticky we
    grid columnconfigure $frame $text -weight 1
    grid rowconfigure $frame $text -weight 1
    return $frame
}

proc freeHeadsets {} {
    set res {}
    foreach hs [array names ::availableHeadsets] {
	if {![info exists ::headsetsInUse(h_$hs)]} {lappend res $hs}
    }
    return [lsort -integer $res]
}

proc takeHeadset {employeeId headset} {
    leaveHeadset $employeeId
    if {[info exists ::availableHeadsets($headset)]} {
	set ::headsetTakeIntent($headset) [clock milliseconds]
	set ::headsetsInUse(e_$employeeId) $headset
	set ::headsetsInUse(h_$headset) $employeeId
	updateWidgetsForEmployee $employeeId $headset
	startRecordOnHeadset $headset {} auto
	return true
    } else {
	return false
    }
}

proc employeeToRequest {employeeId} {
    foreach {name id} [array get ::employee] {
	if {$id == $employeeId} {
	    return [dict create employeeId $id name $name]
	}
    }
    return {}
}

proc headsetEmployeeToRequest {headset} {
    if {[setIfExists ::headsetsInUse(h_$headset) employeeId]} {
	employeeToRequest $employeeId
    } else {
	return {}
    }
}

proc siteToRequest {} {dict create siteId [dict get $::config siteId]}

proc startRecordOnHeadset {headset button mode} {
    if {$button ne ""} {$button configure -state disabled -command {}}
    if {![setIfExists ::availableHeadsets($headset) connData]} return
    set employeeData [headsetEmployeeToRequest $headset]
    if {[llength $employeeData] == 0} return
    set request [dict merge \
		     [dict create msgId [nextCommandId] req start mode $mode] \
		     [siteToRequest] $employeeData]
    if {[sendRequest $connData [simpleDictToJSON $request]]} {
	#debug "Sent request to $chan: $request"
    }
}

proc stopRecordOnHeadset {headset button} {
    if {$button ne ""} {$button configure -state disabled -command {}}
    if {![setIfExists ::availableHeadsets($headset) connData]} return
    set request [dict create msgId [nextCommandId] req stop]
    if {[sendRequest $connData [simpleDictToJSON $request]]} {
	#debug "Sent request to $chan: $request"
    }
}

proc forbidRecordOnHeadset {headset button} {
    if {$button ne ""} {$button configure -state disabled -command {}}
    if {![setIfExists ::availableHeadsets($headset) connData]} return
    set request [dict merge \
		     [dict create msgId [nextCommandId] req start mode forbid] \
		     [siteToRequest] [headsetEmployeeToRequest $headset]]
    if {[sendRequest $connData [simpleDictToJSON $request]]} {
	#debug "Sent request to $chan: $request"
    }
}

proc clearErrorOnHeadset {headset button} {
    if {$button ne ""} {$button configure -state disabled -command {}}
    if {![setIfExists ::availableHeadsets($headset) connData]} return
    set request [dict create msgId [nextCommandId] req clearError]
    if {[sendRequest $connData [simpleDictToJSON $request]]} {
	#debug "Sent request to $chan: $request"
    }
}

proc formatRecordTime {time} {
    set h [expr {$time / 3600}]
    set m [expr {$time % 3600 / 60}]
    set s [expr {$time % 60}]
    if {$h > 0} {
	format "%d:%02d:%02d" $h $m $s
    } else {
	format "%d:%02d" $m $s
    }
}

proc updateWidgetsForEmployee {employeeId headset} {
    if {![dict exists $::employeeControls $employeeId]} return
    dict with ::employeeControls $employeeId {
	if {$headset eq ""} {$headsetSelector set $::notTaken} else {$headsetSelector set $headset}
	set state noHeadset
	set mode auto
	set time 0
	if {[info exists ::headsetState($headset)]} {
	    # Если есть состояние станции с этой гарнитурой, то данные из него
	    array set st $::headsetState($headset)
	    if {[info exists st(state)]} {set state $st(state)} {set state error}
	    if {[info exists st(mode)]} {set mode $st(mode)}
	    if {[info exists st(recordTime)]} {set time $st(recordTime)}
	} else {
	    # Если состояния станции с этой гарнитурой нет, а гарнитура есть, это другая проблема
	    if {$headset ne ""} {set state headsetAbsent}
	}
	# Состояние кнопки запрещения для всех состояний, когда гарнитура
	# есть (их большинство), зависит от mode. Для остальных перекроем.
	if {$mode eq "forbid"} {
	    $forbidButton configure -background {light green} -state normal -text "Разрешить" -command [list startRecordOnHeadset $headset $forbidButton auto]
	} else {
	    $forbidButton configure -background yellow -state normal -text "Запретить" -command [list forbidRecordOnHeadset $headset $forbidButton]
	}
	switch $state {
	    noHeadset {
		$stateLabel configure -text "Гарнитура не взята"
		# default background is gray85
		$recordButton configure -background $::defaultbg -state disabled -text "" -command {}
		$forbidButton configure -background $::defaultbg -state disabled -text "" -command {}
	    }
	    headsetAbsent {
		$stateLabel configure -text "Гарнитура не подключена"
		$recordButton configure -background $::defaultbg -state disabled -text "" -command {}
		$forbidButton configure -background $::defaultbg -state disabled -text "" -command {}
	    }
	    restart {
		$stateLabel configure -text "Подготовка"
		$recordButton configure -background $::defaultbg -state disabled -text "Ждем..." - command {}
	    }
	    ready {
		$stateLabel configure -text "Готовность"
		$recordButton configure -background {light green} -state normal -text "Запустить" -command [list startRecordOnHeadset $headset $recordButton manual]
	    }
	    noDevice {
		$stateLabel configure -text "Гарнитура не подключена"
		$recordButton configure -background red -state disabled -text "" -command {}
	    }
	    silence {
		$stateLabel configure -text "Тишина"
		$recordButton configure -background {light green} -state normal -text "Запустить" -command [list startRecordOnHeadset $headset $recordButton manual]
	    }
	    recording {
		$stateLabel configure -text "Запись [formatRecordTime $time]"
		$recordButton configure -background yellow -state normal -text "Отрезать" -command [list stopRecordOnHeadset $headset $recordButton]
	    }
	    stopping {
		$stateLabel configure -text "Остановка..."
		$recordButton configure -background $::defaultbg -state disabled -text "Ждем..." -command {}
	    }
	    error {
		$stateLabel configure -text "Ошибка"
		$recordButton configure -background red -state normal -text "Сбросить" -command [list clearErrorOnHeadset $headset $recordButton]
	    }
	    default {
		$stateLabel configure -text "Ошибка"
		$recordButton configure -background red -state disabled -text "" -command {}
	    }
	}
	if {$mode eq "forbid" && $state ne "error"} {
	    # mode forbid возможно только если станция есть и гарнитуру видит,
	    # поэтому тут не смотрим на то, есть ли гарнитура
	    $recordButton configure -background red -state disabled -text "Запрещена" -command {}
	}
    }
}

proc updateWidgetsForHeadset {headset} {
    if {[setIfExists ::headsetsInUse(h_$headset) employeeId]} {
	updateWidgetsForEmployee $employeeId $headset
    }
}

proc leaveHeadset {employeeId} {
    if {[setIfExists ::headsetsInUse(e_$employeeId) hs]} {
	unset -nocomplain ::headsetsInUse(h_$hs) ::headsetsInUse(e_$employeeId)
	forbidRecordOnHeadset $hs {}
	updateWidgetsForEmployee $employeeId {}
    }
}

proc leaveAllHeadsets {} {
    foreach peer [array names ::peerConnData] {
	sendRequest $::peerConnData($peer) [simpleDictToJSON [dict create msgId [nextCommandId] req start mode forbid]]
    }
    foreach headset [array names ::availableHeadsets] {
	if {[info exists ::headsetsInUse(h_$headset)]} {
	    set eid $::headsetsInUse(h_$headset)
	    unset -nocomplain ::headsetsInUse(e_$eid) ::headsetsInUse(h_$headset)
	    updateWidgetsForEmployee $eid {}
	}
    }
}

proc createEmployeesTable {container} {
    grid anchor $container center
    set ::employeeControls [dict create]
    set hName [label $container.hName -font $::defaultBoldFont -text Сотрудник]
    set hHeadset [label $container.hHeadset -font $::defaultBoldFont -text Гарнитура]
    set hRecord [label $container.hRecord -font $::defaultBoldFont -text Запись]
    grid configure $hName $hHeadset $hRecord
    grid configure $hName -sticky w
    grid columnconfigure $container all -pad 8
    grid rowconfigure $container all -pad 8
}

proc refillEmployeeControls {} {
    set container $::employeeFrame
    set row 0
    foreach s [grid slaves $container] {
	if {[catch {dict get [grid info $s] -row} r] || $r > 0} {grid forget $s}
    }
    set actualIds {}
    foreach name [lsort -dictionary [array names ::employee]] {
	incr row
	set id $::employee($name)
	if {![dict exists $::employeeControls $id]} {
	    dict set ::employeeControls $id [createEmployeeControls $container $id $name]
	}
	placeEmployeeControls $container $row [dict get $::employeeControls $id]
	lappend actualIds $id
    }
    foreach i [dict keys $::employeeControls] {
	if {$i ni $actualIds} {
	    leaveHeadset $i
	    destroy {*}[dict values $::employeeControls [dict get $::employeeControls $i]]
	}
    }
}

proc placeEmployeeControls {container row controls} {
    dict with controls {
	grid $nameLabel $headsetSelector $stateLabel $recordButton $forbidButton -in $container -row $row
	grid configure $nameLabel -sticky w
	grid configure $headsetSelector -sticky we
	grid configure $stateLabel -sticky e
	grid configure $recordButton -sticky we
	grid configure $forbidButton -sticky we
    }
}

proc createEmployeeControls {container id name} {
    set nameLabel [label $container.nm$id -text $name]
    set headsetSelector [ttk::combobox $container.hs$id -justify center -state readonly -width 3 -values $::notTaken]
    $headsetSelector configure -postcommand [list setAvailableHeadsets $headsetSelector]
    $headsetSelector set $::notTaken
    bind $headsetSelector <<ComboboxSelected>> [list selectHeadsetFor $id $headsetSelector]
    set stateLabel [label $container.st$id -text "Гарнитура не взята" -width 24 -justify right]
    bind $stateLabel <Button-1> [list showCurrentErrorForEmployee $id]
    set recordButton [button $container.rb$id -state disabled -text "" -width 15]
    set forbidButton [button $container.fb$id -state normal -text "" -width 10]
    dict create nameLabel $nameLabel headsetSelector $headsetSelector stateLabel $stateLabel recordButton $recordButton forbidButton $forbidButton
}

proc setAvailableHeadsets {combobox} {
    $combobox configure -values [concat $::notTaken [freeHeadsets]]
}

proc selectHeadsetFor {employeeId selector} {
    set headset [$selector get]
    if {![takeHeadset $employeeId $headset]} {
	$selector set $::notTaken
    }
}

main
