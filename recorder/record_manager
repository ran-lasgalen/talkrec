#!/usr/bin/wish

set libtcldir [file join [file dirname [file normalize [info script]]] libtcl]
source [file join $libtcldir common.tcl]
package require yaml

proc main {} {
    getOptions [configFile record_manager.yaml] {}
    try {
	# Ключ - имя, значение - employeeId
	array set ::employee [::yaml::yaml2dict -file [configFile employees.yaml]]
	set ::config [readConfig $::opt(config)]
    } on error {err dbg} {
	debugStackTrace $dbg
	puts stderr $err
	exit 2
    }
    array set ::availableHeadsets {}
    array set ::headsetsInUse {}
    set ::defaultBoldFont [boldVersionOfFont TkDefaultFont]
    createMainFrame
    foreach peer [dict get $::config recorders] {
	if {[string first : $peer] < 0} {set peer [string cat $peer :17119]}
	set ::onConnect($peer) [list connectedToRecorder $peer]
	set ::onDisconnect($peer) [list disconnectedFromRecorder $peer]
	after idle [list startConnectionLoop $peer]
    }
}

proc readConfig {configFile} {
    set conf [::yaml::yaml2dict -file $configFile]
    set errors {}
    if {![dict exists $conf recorders]} {lappend errors "не указаны адреса устройств записи (recorders)"}
    if {![dict exists $conf siteId]} {lappend errors "не указан идентификатор салона (siteId)"}
    if {[llength $errors] > 0} {error [listOfErrors "Ошибки конфигурации" $errors]}
    return $conf
}

proc debug {message} {puts stderr $message}

proc setIfExists {checkVar setVar} {
    upvar $checkVar cv
    set ie [info exists cv]
    if {$ie} {
	upvar $setVar v
	set v $cv
    }
    return $ie
}

proc startConnectionLoop {peer} {
    if {![regexp {(.*)[: ](\d+)$} $peer - host port]} {return "Не умею соединяться с $peer"}
    if {![info exists ::onConnect($peer)]} {return "Не знаю, что делать после соединения с $peer"}
    if {[info exists ::peerChan($peer)]} {return "Соединение с $peer уже существует"}
    if {[catch {socket -async $host $port} sock]} {
	after 1000 [list startConnectionLoop $peer]
	return "Проблема соединения с $peer (TCP порт $port на $host): $sock"
    }
    set ::peerChan($peer) $sock
    set ::chanPeer($sock) $peer
    set aid [after 1000 [list cleanAndReconnect $peer]]
    fileevent $sock writable [list justConnected $peer $aid]
}

proc cleanAndReconnect {peer} {
    if {[setIfExists ::onDisconnect($peer) onDisconnect]} {catch $onDisconnect}
    if {[setIfExists ::peerChan($peer) chan]} {
	catch {close $chan}
	cleanChanCaches $chan
	unset -nocomplain ::peerChan($peer) ::chanPeer($chan)
	if {[info exists ::onConnect($peer)]} {
	    after 1000 [list startConnectionLoop $peer]
	}
    }
}

proc cleanChan {chan} {
    if {[setIfExists ::chanPeer($chan) peer]} {
	cleanAndReconnect $peer
    } else {
	catch {close $chan}
	cleanChanCaches $chan
    }
}

proc cleanChanCaches {chan} {
    unset -nocomplain ::incompleteCommand($chan) ::incompleteCommandStart($chan)
}

proc justConnected {peer timeoutId} {
    after cancel $timeoutId
    if {![setIfExists ::peerChan($peer) sock]} {cleanAndReconnect $peer; return}
    if {[fconfigure $sock -error] ne ""} {cleanAndReconnect $peer; return}
    fileevent $sock writable ""
    fconfigure $sock -blocking 0 -buffering line
    if {![setIfExists ::onConnect($peer) script]} {cleanAndReconnect $peer; return}
    after idle $script
}

proc connectedToRecorder {peer} {
    if {[setIfExists ::peerChan($peer) chan]} {
	fileevent $chan readable [list handleReply $chan]
    }
    after idle [list requestState $peer]
}

proc disconnectedFromRecorder {peer} {
    foreach {headset p} [array get ::availableHeadsets] {
	if {$p eq $peer} {
	    unset -nocomplain ::headsetState($headset)
	    updateButtonForHeadset $headset
	    break
	}
    }
}

proc chanPeer {chan} {
    if {[info exists ::chanPeer($chan)]} {
	return $::chanPeer($chan)
    } else {
	return $chan
    }
}

# TODO be more careful on possible filling buffers
proc sendRequest {chan request} {
    set peer [chanPeer $chan]
    ::log::log debug "$peer <- $request"
    if {[catch {puts $chan $request} err]} {
	::log::log error "Ошибка отправки запроса к $peer: $err"
	cleanChan $chan
	return 0
    }
    if {[fconfigure $chan -error] ne ""} {
	::log::log error "Ошибка в соединении с $peer: [fconfigure $chan -error]"
	cleanChan $chan
	return 0
    }
    return 1
}

proc requestState {peer} {
    if {![setIfExists ::peerChan($peer) chan]} {cleanAndReconnect $peer; return}
    if {[sendRequest $chan [list [nextCommandId] state]]} {
	after 500 [list requestState $peer]
    }
}

proc handleReply {chan} {
    setIfExists ::chanPeer($chan) peer
    set replyWithId [getReply $chan]
    if {$replyWithId eq ""} return
    ::log::log debug "$peer -> $replyWithId"
    if {![regexp {^\s*(\d+)\s+(\S.*)} $replyWithId - replyId reply]} {
	set reply $replyWithId
	set replyId 0
    }
    array set state $reply
    if {[setIfExists state(headset) headset]} {
	if {[info exists peer]} {
	    set ::availableHeadsets($headset) $peer
	} else {
	    unset ::availableHeadsets($headset)
	}
	set ::headsetState($headset) [array get state]
	updateButtonForHeadset $headset
    }
}

proc getReply {chan} {
    set now [cleanupIncompleteCommandCache]
    append ::incompleteCommand($chan) [gets $chan]
    set cmd $::incompleteCommand($chan)
    if {[info complete $cmd] && $cmd ne ""} {
	unset -nocomplain ::incompleteCommand($chan) ::incompleteCommandStart($chan)
	return $cmd
    } else {
	if {[eof $chan]} {
	    cleanChan $chan
	} else {
	    checkVar ::incompleteCommandStart($chan) $now
	}
	return ""
    }
}

proc checkVar {var val} {
    upvar $var v
    if {![info exists v]} {set v $val}
}

proc cleanupIncompleteCommandCache {} {
    set now [clock seconds]
    set staleTime [expr $now - 5]
    foreach chan [array names ::incompleteCommandStart] {
	if {$::incompleteCommandStart($chan) < $staleTime} {
	    unset -nocomplain ::incompleteCommand($chan)
	    unset -nocomplain ::incompleteCommandStart($chan)
	}
    }
    return $now
}

proc nextCommandId {} {
    incr ::nextCommandId
    format "%010d" $::nextCommandId
}

proc boldVersionOfFont {font} {
    array set font_attrs [font actual $font]
    set font_attrs(-weight) bold
    if {[catch {font create {*}[array get font_attrs]} res]} {
	puts stderr "boldVersionOfFont: $res"
	return $font
    } else {
	return $res
    }
}

proc createMainFrame {} {
    set ::mainWindow .
    wm title $::mainWindow "Управление записью"
    wm iconname $::mainWindow "Управление записью"
    wm attributes $::mainWindow -fullscreen 1
    grid anchor $::mainWindow center
    set mainFrame [frame $::mainWindow.mainFrame]
    grid $mainFrame
    createEmployeesTable $mainFrame
    grid [button $::mainWindow.exit -command exit -text {Завершить работу}]
}

proc freeHeadsets {} {
    set res {}
    foreach hs [array names ::availableHeadsets] {
	if {![info exists ::headsetsInUse(h_$hs)]} {lappend res $hs}
    }
    return [lsort -integer $res]
}

proc takeHeadset {employeeId headset} {
    leaveHeadset $employeeId
    if {[info exists ::availableHeadsets($headset)]} {
	set ::headsetsInUse(e_$employeeId) $headset
	set ::headsetsInUse(h_$headset) $employeeId
	updateButtonForHeadset $headset
	return true
    } else {
	return false
    }
}

proc startRecordOnHeadset {headset button} {
    $button configure -state disabled -command {}
    if {![setIfExists ::availableHeadsets($headset) peer]} return
    if {![setIfExists ::peerChan($peer) chan]} {cleanAndReconnect $peer; return}
    if {![setIfExists ::headsetsInUse(h_$headset) employeeId]} return
    foreach {name id} [array get ::employee] {
	if {$id == $employeeId} {
	    set request [list [nextCommandId] start \
			     siteId [dict get $::config siteId] \
			     employeeId $id name $name \
			     time 180]
	    if {[sendRequest $chan $request]} {
		#debug "Sent request to $chan: $request"
	    }
	    break
	}
    }
}

proc stopRecordOnHeadset {headset button} {
    $button configure -state disabled -command {}
    if {![setIfExists ::availableHeadsets($headset) peer]} return
    if {![setIfExists ::peerChan($peer) chan]} {cleanAndReconnect $peer; return}
    set request [list [nextCommandId] stop]
    if {[sendRequest $chan $request]} {
	#debug "Sent request to $chan: $request"
    }
}

proc updateButtonForHeadset {headset} {
    if {![info exists ::headsetsInUse(h_$headset)]} return
    set employeeId $::headsetsInUse(h_$headset)
    if {![info exists ::recordButton($employeeId)]} return
    set button $::recordButton($employeeId)
    if {[info exists ::headsetState($headset)]} {
	#debug $::headsetState($headset)
	array set st $::headsetState($headset)
	if {[info exists st(state)]} {set state $st(state)} {set state error}
	switch $state {
	    ready {
		$button configure -background {light green} -state normal -text "Начать запись" -command [list startRecordOnHeadset $headset $button]
	    }
	    noDevice {
		$button configure -background red -state disabled -text "Нет управления" -command {}
	    }
	    recording {
		if {![setIfExists st(recordTime) time]} {set time 0}
		$button configure -background yellow -state normal -text "[formatTimeInterval $time] Остановить" -command [list stopRecordOnHeadset $headset $button]
	    }
	    default {
		$button configure -background red -state disabled -text "Ошибка" -command {}
	    }
	}
    } else {
	$button configure -background gray85 -state disabled -text "Нет управления" -command {}
    }
}

proc leaveHeadset {employeeId} {
    if {[info exists ::headsetsInUse(e_$employeeId)]} {
	set hs $::headsetsInUse(e_$employeeId)
	unset -nocomplain ::headsetsInUse(h_$hs) ::headsetsInUse(e_$employeeId)
	if {[info exists ::recordButton($employeeId)]} {
	    $::recordButton($employeeId) configure -background gray85 -state disabled -command {} -text "Нет гарнитуры"
	}
    }
}

proc createEmployeesTable container {
    proc setAvailableHeadsets {combobox} {
	$combobox configure -values [concat — [freeHeadsets]]
    }
    proc selectHeadsetFor {employeeId selector} {
	set headset [$selector get]
	if {![takeHeadset $employeeId $headset]} {
	    $selector set —
	}
    }
    array set ::headsetSelector {}
    array set ::recordButton {}
    set hName [label $container.hName -font $::defaultBoldFont -text Имя]
    set hHeadset [label $container.hHeadset -font $::defaultBoldFont -text Гарнитура]
    set hRecord [label $container.hRecord -font $::defaultBoldFont -text Запись]
    grid configure $hName $hHeadset $hRecord
    grid configure $hName -sticky w
    foreach name [lsort -dictionary [array names ::employee]] {
	set id $::employee($name)
	set nameLabel [label $container.nm$id -text $name]
	set headsetSelector [ttk::combobox $container.hs$id -justify center -state readonly -width 2 -values —]
	$headsetSelector configure -postcommand [list setAvailableHeadsets $headsetSelector]
	$headsetSelector set —
	bind $headsetSelector <<ComboboxSelected>> [list selectHeadsetFor $id $headsetSelector]
	set ::headsetSelector($id) $headsetSelector
	set recordButton [button $container.rb$id -state disabled -text "Нет гарнитуры" -width 15]
	set ::recordButton($id) $recordButton
	grid configure $nameLabel $headsetSelector $recordButton
	grid configure $nameLabel -sticky w
	grid configure $headsetSelector -sticky we
	grid configure $recordButton -sticky we
    }
    grid columnconfigure $container all -pad 8
    grid rowconfigure $container all -pad 8
}

main
