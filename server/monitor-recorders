#!/usr/bin/tclsh

set libtcldir [file join [file dirname [file dirname [file normalize [info script]]]] recorder libtcl]
source [file join $libtcldir common.tcl]
source [file join $libtcldir install.tcl]
package require tdbc
package require tdbc::postgres

proc main {} {
    getOptions [configDictFile dispatcher] {}
    set ::config [readDict $::opt(-config)]
    set ::database [dictGetOr talkrec $::config database]
    set ::irConfig [readDict [configDictFile install-recorder]]
    if {[catch {dict get $::irConfig serverAddr} ::serverAddr]} {
	error "В [configDictFile install-recorder] не указан serverAddr"
    }
    array set ::hostState {}
    asyncLoop runHostChecks 60000 runHostChecks
    after 8000 {asyncLoop fixHostCheckResults 60000 fixHostCheckResults}
    socket -server acceptConfigRequest 17120
    vwait exit
}

proc runHostChecks {} {
    safelog {info "runHostChecks heartbeat"}
    ::tdbc::postgres::connection create dbc -database $::database
    try {
	set hosts [lmap row [dbc allrows -as lists {select ip from record_station}] {lindex $row 0}]
    } finally {dbc close}
    foreach host $hosts {asyncConnect $host 17119 2000 recorder onConnectToRecorder onDisconnectFromRecorder}
}

proc onConnectToRecorder {connData} {
    safelog {debug [list onConnectToRecorder $connData]}
    set chan [connDataChan $connData]
    fconfigure $chan -buffering line
    after 4000 [list asyncDisconnect $connData replyTimeout]
    catchDbg {puts $chan [stateRequest]}
    fileevent $chan readable [list asyncOnReply $connData 4000 serveReplyFromRecorder]
}

proc recordError {connData state {message {}}} {
    if {[catch {connDataHost $connData} host]} {
	safelog {error "Нет ключа host в [list $connData]\n  +проблема: $message"}
    } else {
	set st [dict create state $state]
	if {$message ne ""} {dict set st errorMessage $message}
	recordHostState $host $st
    }
}

proc fixHostCheckResults {} {
    safelog {info "fixHostCheckResults heartbeat"}
    set states [array get ::hostState]
    array set ::hostState {}
    if {[dict size $states] == 0} return
    ::tdbc::postgres::connection create dbf -database $::database
    try {
	dict for {host state} $states {
	    dict set state host $host
	    dict set state timestamp [clock format [dict get $state receivedAt] -format "%Y-%m-%d %H:%M:%S%z"]
	    # state, host и timestamp есть всегда
	    # если errorMessage, name, siteId и headset отсутствуют, то их надо выставить в NULL
	    set updateQuery {update record_station
		set state = :stateRu, state_at = :timestamp, error_message = :errorMessage,
		reported_name = :name, reported_site_id = :siteId, reported_headset = :headset}
	    # а version и timeDiff надо апдейтить только если они есть, а если нет, оставить прежние
	    if {[dict exists $state version]} {append updateQuery {, version = :version}}
	    if {[dict exists $state timeDiff]} {append updateQuery {, time_diff = :timeDiff}}
	    # и не забыть where
	    append updateQuery { where ip = :host and (state <> 'отключена' or state is null)}
	    dbf allrows $updateQuery $state
	}
    } finally {dbf close}
}

proc recordHostState {host stateDict} {
    dict set stateDict receivedAt [clock seconds]
    if {[catch {dict get $stateDict version} version]} {set version ""}
    if {$version eq ""} {dict set stateDict version "доисторическая"}
    if {[dict exists $stateDict now]} {
	dict set stateDict timeDiff [expr {[dict get $stateDict now] - [clock seconds]}]
    }
    set state [dictGetOr empty $stateDict state]
    switch $state {
	silence -
	stopping -
	recording {dict set stateDict stateRu "запись"}
	restart -
	ready {dict set stateDict stateRu "простаивает"}
	empty -
	noDevice -
	error {dict set stateDict stateRu "не работает"}
	default {dict set stateDict stateRu $state}
    }
    set ::hostState($host) $stateDict
}

proc onDisconnectFromRecorder {connData reason message} {
    safelog {debug [list onDisconnectFromRecorder $connData $reason $message]}
    switch $reason {
	connectTimeout {recordError $connData "недоступна"}
	replyTimeout {recordError $connData "не ответила"}
	error {
	    if {$message eq "connection refused"} {
		recordError $connData "не работает"
	    } else {
		recordError $connData "не работает" $message
	    }
	}
	ok {
	    if {[catch {connDataHost $connData} host]} {
		safelog {error "Нет ключа host в [list $connData]"}
	    } else {
		safelog {debug "$host [list $message]"}
		recordHostState $host $message
	    }
	}
	default {recordError $connData "не работает" $message}
    }
}

proc serveReplyFromRecorder {connData line} {
    safelog {debug [list serveReplyFromRecorder $connData $line]}
    if {[catch {parseObject $line} obj dbg]} {
	debugStackTrace $dbg
	return [list ok {}]
    }
    return [list ok $obj]
}

proc stateRequest {} {simpleDictToJSON [dict create msgId [nextMessageId] req state] 0}

proc nextMessageId {} {incr ::nextMessageId}

proc acceptConfigRequest {sock addr port} {
    safelog {debug [list acceptConfigRequest $sock $addr $port]}
    fconfigure $sock -blocking 0 -buffering line
    set connData [dict create chan $sock host $addr port $port pass {} onDisconnect configRequestDisconnect]
    after 10000 [list asyncDisconnect $connData replyTimeout]
    fileevent $sock readable [list asyncOnReply $connData 10000 serveConfigRequest]
}

proc configRequestDisconnect {connData reason message} {
    safelog {debug [list configRequestDisconnect $connData $reason $message]}
    switch $reason {
	waitTimeout {
	    safelog {warning "Истекло время ожидания запроса конфигурациии от [connDataHost $connData]"}
	}
	error {
	    safelog {error "Ошибка в соединении [connDataHost $connData] с конфигуратором: $message"}
	}
    }
}

proc serveConfigRequest {connData line} {
    safelog {debug [list serveConfigRequest $connData $line]}
    if {[catch {parseObject $line} req dbg]} {
	debugStackTrace $dbg
	return [list error "serveConfigRequest: непонятный запрос от [connDataHost $connData]: $line"]
    }
    set requestedConfigs [dictGetOr {} $req configurations]
    if {[llength $requestedConfigs] == 0} {return {ok "serveConfigRequest: никаких конфигураций не спросили"}}
    set db [::tdbc::postgres::connection create dbcr -database $::database]
    try {
	if {[catch {dict get [siteAndHeadsetForIP $db [connDataHost $connData]] site_id} siteId dbg]} {
	    debugStackTrace $dbg
	    return [list error "serveConfigRequest: $siteId"]
	}
	set reply [dict create]
	foreach cfg $requestedConfigs {
	    switch $cfg {
		employees {dict set reply $cfg [genEmployeesConfig $db $siteId 0]}
		record_manager {dict set reply $cfg [genRecordManagerConfig $db $siteId $::serverAddr 0]}
	    }
	}
	::json::write indented 0
	set replyJson [::json::write object {*}$reply]
	puts [connDataChan $connData] $replyJson
    } finally {$db close}
    return {ok {}}
}

runMain
