Структура базы данных
=====================

Модель данных с точки зрения подсистем записи и распознавания
-------------------------------------------------------------

Мы записываем и распознаем разговор сотрудника с клиентом в некотором
салоне. В исходных данных указывалось, что один и тот же сотрудник может
выходить на работу в разные салоны, поэтому "сотрудник разговаривал с клиентом
в салоне", а не "сотрудник работает в салоне". "Салон" - понятие условное,
минимальная организационная единица. Насколько мне удалось понять, интересует
аналитика по организационным единицам, у которых есть иерархия. Про иерархию
есть только предположение, поэтому на данный момент отражение ее минимально.

Интерфейсу записи, расположенному в салоне, интересен список "своих"
сотрудников (предполагается, что их немного, и можно показать всех на одном
экране вместе с состоянием записи). Интересен также список известных
сотрудников своего региона в том смысле, что сотрудник может выйти на работу в
другой салон в своем городе. Этот список более длинный, его использование
предусмотрено в режиме "выбрать из списка". Эти два момента и отображены в
структуре.

Удобное для аналитики отношение организационных единиц можно добавить, когда будет более точное представление о задачах аналитики.

Система записи рассчитана на отсутствие постоянной связи с сервером
распознавания, но эпизодическая все же требуется. Система записи периодически
пытается обновить списки сотрудников с сервера, но если не может, работает с
тем, что есть. В интерфейсе и структуре данных также предусматривается
возможность завести нового сотрудника в салоне без оперативной связи с
сервером.

Записи, таблица talk
--------------------

id integer primary key - ключ, для ссылок
startedAt datetime - дата/время (начала) записи
talk text - распознанный текст записи
employeeId - ключ сотрудника
siteId - ключ салона

Сотрудники, таблица employee
----------------------------

id integer primary key - ключ для ссылок
uuid string unique - уникальный идентификатор
name - имя, для показа в интерфейсе

Комментарий: предусмотрено, что нового сотрудника можно завести в салоне, не
дожидаясь, когда он появится в централизованной базе данных (практика показывает, что таких событий можно ждать месяцами). Интерфейс записи
разговоров позволяет это сделать. Но он не имеет непосредственного доступа к
базе данных сервера, и не может выделить ему id. Он генерирует uuid, и
передает его вместе с именем на сервер, когда отправляет запись. Сервер, если
не видит этого uuid в базе, заводит нового сотрудника.

Организационные единицы, таблица site
-------------------------------------

id integer primary key - идентификатор, для ссылок
name - название, для показа в аналитике

Комментарий: на текущем этапе условный "свой город" — это тоже site.

Распределение сотрудников по салонам, таблица site_employee
-----------------------------------------------------------

siteId - ключ салона
employeeId - ключ сотрудника

Применяется интерфейсом записи, чтобы отследить своих сотрудников. Сотрудник
может относиться к нескольким салонам.

Распределение салонов по регионам, таблица site_region
------------------------------------------------------

siteId - ключ сайта
regionId - ключ региона

Применяется интерфейсом записи, чтобы отследить список сотрудников, которые
могут выйти на работу в салон — это сотрудники всех салонов "своих"
регионов. В системе нет ограничения на то, что один салон относится строго к
одному региону, допускается деление с перекрытием.
